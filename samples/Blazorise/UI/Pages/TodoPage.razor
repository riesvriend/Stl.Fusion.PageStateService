@page "/todo"
@using System.Threading
@using Templates.Blazor2.Abstractions
@inherits LiveComponentBase<TodoUIModel>
@inject ITodoUIService TodoUI
@inject Session Session
@inject CommandRunner CommandRunner
@inject AuthStateProvider AuthStateProvider

@{
    var error = State.Error;
    var model = State.UnsafeValue ?? new();
}

<h1>Todo List</h1>

<StatefulComponentState Component="@this" />
<Text Margin="Margin.Is1.OnY">
    Updated: <b><MomentsAgoBadge Value="model.LastStateUpdateTime" /></b>
</Text>

<AuthorizeView>
    <NotAuthorized>
        <SignInDropdown Why="to use this page" />
    </NotAuthorized>
    <Authorized>
        <!--
        This comment is here solely to reset the indent in VS / Rider -->

        <WhenException Exception="error" />
        <WhenCommandError Exception="CommandRunner.Error" />

        <Row>
            <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnTablet">
                @foreach (var todoModel in model.Items)
                {
                    var todo = todoModel.Todo;
                    <Addons Margin="Margin.Is3.OnY">
                        <Addon AddonType="AddonType.Start">
                            <AddonLabel>
                                <Blazorise.Icon Name="@(todo.IsDone ? FontAwesomeIcons.CheckSquare : FontAwesomeIcons.Square)"
                                                @onclick="_ => InvertDone(todo)" />
                            </AddonLabel>
                        </Addon>
                        <TextEdit TextChanged="text => UpdateTitle(todo, text)" ChangeTextOnKeyPress="false"
                                  Text="@todo.Title" />
                        <Addon AddonType="AddonType.End">
                            <Button Clicked="_ => Remove(todo)" Color="Color.Warning">
                                <Blazorise.Icon Name="FontAwesomeIcons.Minus" />
                            </Button>
                        </Addon>
                    </Addons>
                }

                @if (model.HasMore)
                {
                    <Button Clicked="_ => LoadMore()" Color="Color.Primary" Margin="Margin.Is3.OnY">
                        Load more <Blazorise.Icon Name="FontAwesomeIcons.AngleDoubleDown" />
                    </Button>
                }

                <Form @onsubmit="_ => Create()" Margin="Margin.Is3.OnY">
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <Button Type="@ButtonType.Submit" Color="Color.Primary">
                                <Blazorise.Icon Name="@FontAwesomeIcons.PlusSquare" />
                            </Button>
                        </Addon>
                        <input @bind="NewTodoTitle" @bind:event="onchange" class="form-control" />
                    </Addons>
                </Form>

            </Column>
        </Row>

        <!--
         -->
    </Authorized>
</AuthorizeView>


@code {
    // AuthState property below seemingly does nothing, right?
    // But try to comment out this line & sign-in + sign-out. See the error badge stays there for a while now?
    // Check your explanation on our Discord: https://discord.gg/EKEwv6d
    [CascadingParameter] protected Task<AuthState> AuthState { get; set; } = null!;

    private string NewTodoTitle { get; set; } = "";

    protected override void OnInitialized()
    {
        CommandRunner.Component = this;
        StateHasChangedTriggers = StateEventKind.All;
        base.OnInitialized();
    }

    public override void Dispose()
    {
        TodoUI.Clear(Session);
        base.Dispose();
    }

    protected override async Task<TodoUIModel> ComputeState(CancellationToken cancellationToken)
    {
        var model = await TodoUI.Get(Session, cancellationToken);
        return model;
    }

    private Task LoadMore()
    {
        return TodoUI.LoadMore(Session);
    }

    private Task InvertDone(Todo todo)
    {
        todo = todo with { IsDone = !todo.IsDone };
        return CommandRunner.Call(new AddOrUpdateTodoCommand(Session, todo));
    }

    private Task UpdateTitle(Todo todo, string title)
    {
        title = title.Trim();
        if (todo.Title == title)
            return Task.CompletedTask;
        todo = todo with { Title = title };
        return CommandRunner.Call(new AddOrUpdateTodoCommand(Session, todo));
    }

    private Task Remove(Todo todo)
        => CommandRunner.Call(new RemoveTodoCommand(Session, todo.Id));

    private Task Create()
    {
        var todo = new Todo("", NewTodoTitle);
        NewTodoTitle = "";
        StateHasChanged();
        return CommandRunner.Call(new AddOrUpdateTodoCommand(Session, todo));
    }
}
