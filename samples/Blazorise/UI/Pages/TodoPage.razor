@page "/todo"
@using System.Threading
@using Stl.CommandR;
@inherits LiveComponentBase<TodoPageState>
@inject ITodoService Todos
@inject ITodoPageStateService PageStateService
@inject Session Session
@inject CommandRunner CommandRunner
@inject AuthStateProvider AuthStateProvider

@{
    Debug.WriteLine($"Rendering TodoPage. ConsistencyState: {State.Computed.ConsistencyState}");
 var error = State.Error;
 var state = State.UnsafeValue ?? new(); // UnsafeValue returns default if there is an Error
}

<h1>Todo List</h1>

<StateOfStateBadge State="@State" />
<Text Margin="Margin.Is1.OnY">
    Updated: <b><MomentsAgoBadge Value="state.LastStateUpdateTimeUtc" /></b>
</Text>

<AuthorizeView>
    <NotAuthorized>
        <SignInDropdown Why="to use this page" />
    </NotAuthorized>
    <Authorized>
        <WhenException Exception="error" />
        <WhenCommandError Exception="CommandRunner.Error" />
        <Row>
            <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnTablet">
                @foreach (var todo in state.Items)
                {
                    <TodoItem @key="@todo.Id" Value="@todo" />
                }

                @if (state.HasMore)
                {
                    <Button Clicked="_ => LoadMore()" Color="Color.Primary" Margin="Margin.Is3.OnY">
                        Load more <Blazorise.Icon Name="FontAwesomeIcons.AngleDoubleDown" />
                    </Button>
                }

                <Form @onsubmit="_ => Create()" Margin="Margin.Is3.OnY">
                    <Addons>
                        <Addon AddonType="AddonType.Start">
                            <Button Type="@ButtonType.Submit" Color="Color.Primary">
                                <Blazorise.Icon Name="@FontAwesomeIcons.PlusSquare" />
                            </Button>
                        </Addon>
                        <input @bind="NewTodoTitle" @bind:event="onchange" class="form-control" />
                    </Addons>
                </Form>
            </Column>
        </Row>
    </Authorized>
</AuthorizeView>

@code {
    private string NewTodoTitle { get; set; } = "";

    // AuthState property below seemingly does nothing, right?
    // But try to comment out this line & sign-in + sign-out. See the error badge stays there for a while now?
    // Check your explanation on our Discord: https://discord.gg/EKEwv6d
    [CascadingParameter] protected Task<AuthState> AuthState { get; set; } = null!;

    protected override async Task<TodoPageState> ComputeState(CancellationToken cancellationToken)
    {
        var state = await PageStateService.Get(Session, cancellationToken);
        return state;
    }

    private Task LoadMore()
    {
        return Call(new LoadMoreCommand(Session));
    }

    private Task Create()
    {
        var todo = new Todo("", NewTodoTitle);
        NewTodoTitle = "";
        return Call(new AddOrUpdateTodoCommand(Session, todo));
    }

    protected async Task Call<TResult>(ICommand<TResult> command)
    {
        CommandRunner.Component = this;
        await CommandRunner.Call(command, cancellationToken: default);
        InvalidateState();
    }
}
